
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b48  08002b48  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002b48  08002b48  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b48  08002b48  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000048  08002b98  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08002b98  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a016  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e97  00000000  00000000  0002a087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017452  00000000  00000000  0002d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5fc  00000000  00000000  0004488a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082773  00000000  00000000  00051e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d45f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa0  00000000  00000000  000d464c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b0c 	.word	0x08002b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002b0c 	.word	0x08002b0c

0800014c <isButtonPress>:
int keyReg0[BTN_COUNT] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg1[BTN_COUNT] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg2[BTN_COUNT] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg3[BTN_COUNT] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE }; // previous stable state

int isButtonPress(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000064 	.word	0x20000064

08000180 <getKeyInput>:
void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int index = 0; index < BTN_COUNT; index ++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e08c      	b.n	80002a6 <getKeyInput+0x126>
		keyReg2[index] = keyReg1[index];
 800018c:	4a4a      	ldr	r2, [pc, #296]	; (80002b8 <getKeyInput+0x138>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4949      	ldr	r1, [pc, #292]	; (80002bc <getKeyInput+0x13c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[index] = keyReg0[index];
 800019c:	4a48      	ldr	r2, [pc, #288]	; (80002c0 <getKeyInput+0x140>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4944      	ldr	r1, [pc, #272]	; (80002b8 <getKeyInput+0x138>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (index == 0)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10b      	bne.n	80001ca <getKeyInput+0x4a>
			keyReg0[index] = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 80001b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b6:	4843      	ldr	r0, [pc, #268]	; (80002c4 <getKeyInput+0x144>)
 80001b8:	f001 fc7c 	bl	8001ab4 <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	4619      	mov	r1, r3
 80001c0:	4a3f      	ldr	r2, [pc, #252]	; (80002c0 <getKeyInput+0x140>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001c8:	e01c      	b.n	8000204 <getKeyInput+0x84>
		else if (index == 1)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d10b      	bne.n	80001e8 <getKeyInput+0x68>
			keyReg0[index] = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 80001d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d4:	483b      	ldr	r0, [pc, #236]	; (80002c4 <getKeyInput+0x144>)
 80001d6:	f001 fc6d 	bl	8001ab4 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a38      	ldr	r2, [pc, #224]	; (80002c0 <getKeyInput+0x140>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e00d      	b.n	8000204 <getKeyInput+0x84>
		else if (index == 2)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x84>
			keyReg0[index] = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 80001ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f2:	4834      	ldr	r0, [pc, #208]	; (80002c4 <getKeyInput+0x144>)
 80001f4:	f001 fc5e 	bl	8001ab4 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a30      	ldr	r2, [pc, #192]	; (80002c0 <getKeyInput+0x140>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		else {
			// Do Nothing
		}

		if ((keyReg0[index] == keyReg1[index])  && (keyReg1[index] == keyReg2[index])){
 8000204:	4a2e      	ldr	r2, [pc, #184]	; (80002c0 <getKeyInput+0x140>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	492a      	ldr	r1, [pc, #168]	; (80002b8 <getKeyInput+0x138>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d143      	bne.n	80002a0 <getKeyInput+0x120>
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <getKeyInput+0x138>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4926      	ldr	r1, [pc, #152]	; (80002bc <getKeyInput+0x13c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d139      	bne.n	80002a0 <getKeyInput+0x120>
			if (keyReg0[index] != keyReg3[index]){
 800022c:	4a24      	ldr	r2, [pc, #144]	; (80002c0 <getKeyInput+0x140>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4924      	ldr	r1, [pc, #144]	; (80002c8 <getKeyInput+0x148>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d017      	beq.n	8000270 <getKeyInput+0xf0>
				keyReg3[index] = keyReg0[index];
 8000240:	4a1f      	ldr	r2, [pc, #124]	; (80002c0 <getKeyInput+0x140>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	491f      	ldr	r1, [pc, #124]	; (80002c8 <getKeyInput+0x148>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg0[index] == PRESSED_STATE){
 8000250:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <getKeyInput+0x140>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d121      	bne.n	80002a0 <getKeyInput+0x120>
					TimeOutForKeyPress = 500;
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <getKeyInput+0x14c>)
 800025e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000262:	601a      	str	r2, [r3, #0]
					//TODO
					button_flag[index] = 1;
 8000264:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <getKeyInput+0x150>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2101      	movs	r1, #1
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026e:	e017      	b.n	80002a0 <getKeyInput+0x120>
				}
			}
			else {
				TimeOutForKeyPress --;
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <getKeyInput+0x14c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a15      	ldr	r2, [pc, #84]	; (80002cc <getKeyInput+0x14c>)
 8000278:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0){
 800027a:	4b14      	ldr	r3, [pc, #80]	; (80002cc <getKeyInput+0x14c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d10e      	bne.n	80002a0 <getKeyInput+0x120>
					TimeOutForKeyPress = 500;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <getKeyInput+0x14c>)
 8000284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000288:	601a      	str	r2, [r3, #0]
					if (keyReg0[index] == PRESSED_STATE){
 800028a:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <getKeyInput+0x140>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d104      	bne.n	80002a0 <getKeyInput+0x120>
						//TODO
						button_flag[index] = 1;
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <getKeyInput+0x150>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2101      	movs	r1, #1
 800029c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int index = 0; index < BTN_COUNT; index ++){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	f77f af6f 	ble.w	800018c <getKeyInput+0xc>
			}
		}
	}


}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000010 	.word	0x20000010
 80002bc:	2000001c 	.word	0x2000001c
 80002c0:	20000004 	.word	0x20000004
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	20000028 	.word	0x20000028
 80002cc:	20000000 	.word	0x20000000
 80002d0:	20000064 	.word	0x20000064

080002d4 <count_second_by_timer7SEG_auto>:
 */

#include "fsm_automatic.h"


void count_second_by_timer7SEG_auto(){
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	count_timer_7SEG++;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <count_second_by_timer7SEG_auto+0x38>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <count_second_by_timer7SEG_auto+0x38>)
 80002e0:	6013      	str	r3, [r2, #0]
	if (count_timer_7SEG >= 4){ // equal 1 second
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <count_second_by_timer7SEG_auto+0x38>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	dd0c      	ble.n	8000304 <count_second_by_timer7SEG_auto+0x30>
		light_traffic_x_countdown --;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <count_second_by_timer7SEG_auto+0x3c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <count_second_by_timer7SEG_auto+0x3c>)
 80002f2:	6013      	str	r3, [r2, #0]
		light_traffic_y_countdown --;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <count_second_by_timer7SEG_auto+0x40>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <count_second_by_timer7SEG_auto+0x40>)
 80002fc:	6013      	str	r3, [r2, #0]
		count_timer_7SEG = 0;
 80002fe:	4b03      	ldr	r3, [pc, #12]	; (800030c <count_second_by_timer7SEG_auto+0x38>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
	}
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	2000008c 	.word	0x2000008c
 8000310:	20000090 	.word	0x20000090
 8000314:	20000094 	.word	0x20000094

08000318 <fsm_automatic_run>:
void fsm_automatic_run(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	switch (status) {
 800031c:	4b7c      	ldr	r3, [pc, #496]	; (8000510 <fsm_automatic_run+0x1f8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b04      	cmp	r3, #4
 8000322:	f200 80ea 	bhi.w	80004fa <fsm_automatic_run+0x1e2>
 8000326:	a201      	add	r2, pc, #4	; (adr r2, 800032c <fsm_automatic_run+0x14>)
 8000328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032c:	08000341 	.word	0x08000341
 8000330:	08000385 	.word	0x08000385
 8000334:	080003e5 	.word	0x080003e5
 8000338:	08000447 	.word	0x08000447
 800033c:	08000499 	.word	0x08000499
		case INIT:
			//TODO
			status = AUTO_RED_GREEN;
 8000340:	4b73      	ldr	r3, [pc, #460]	; (8000510 <fsm_automatic_run+0x1f8>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]
			// set edit = normal before run normal
			red_edit = red_duration;
 8000346:	4b73      	ldr	r3, [pc, #460]	; (8000514 <fsm_automatic_run+0x1fc>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a73      	ldr	r2, [pc, #460]	; (8000518 <fsm_automatic_run+0x200>)
 800034c:	6013      	str	r3, [r2, #0]
			green_edit = green_duration;
 800034e:	4b73      	ldr	r3, [pc, #460]	; (800051c <fsm_automatic_run+0x204>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a73      	ldr	r2, [pc, #460]	; (8000520 <fsm_automatic_run+0x208>)
 8000354:	6013      	str	r3, [r2, #0]
			yellow_edit = yellow_duration;
 8000356:	4b73      	ldr	r3, [pc, #460]	; (8000524 <fsm_automatic_run+0x20c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a73      	ldr	r2, [pc, #460]	; (8000528 <fsm_automatic_run+0x210>)
 800035c:	6013      	str	r3, [r2, #0]
			/******************************/
			light_traffic_x_countdown = red_duration;
 800035e:	4b6d      	ldr	r3, [pc, #436]	; (8000514 <fsm_automatic_run+0x1fc>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a72      	ldr	r2, [pc, #456]	; (800052c <fsm_automatic_run+0x214>)
 8000364:	6013      	str	r3, [r2, #0]
			light_traffic_y_countdown = green_duration;
 8000366:	4b6d      	ldr	r3, [pc, #436]	; (800051c <fsm_automatic_run+0x204>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a71      	ldr	r2, [pc, #452]	; (8000530 <fsm_automatic_run+0x218>)
 800036c:	6013      	str	r3, [r2, #0]
			display7SEG_X(light_traffic_x_countdown);
 800036e:	4b6f      	ldr	r3, [pc, #444]	; (800052c <fsm_automatic_run+0x214>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fbd2 	bl	8000b1c <display7SEG_X>
			display7SEG_Y(light_traffic_y_countdown);
 8000378:	4b6d      	ldr	r3, [pc, #436]	; (8000530 <fsm_automatic_run+0x218>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fc01 	bl	8000b84 <display7SEG_Y>
			break;
 8000382:	e0c3      	b.n	800050c <fsm_automatic_run+0x1f4>
		case AUTO_RED_GREEN:
			//TODO
			light_traffic_redX();
 8000384:	f000 ff92 	bl	80012ac <light_traffic_redX>
			light_traffic_greenY();
 8000388:	f001 f808 	bl	800139c <light_traffic_greenY>
			// change status condition
			count_second_by_timer7SEG_auto(); //count second
 800038c:	f7ff ffa2 	bl	80002d4 <count_second_by_timer7SEG_auto>
			// change status
			if (light_traffic_y_countdown == 0){
 8000390:	4b67      	ldr	r3, [pc, #412]	; (8000530 <fsm_automatic_run+0x218>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d106      	bne.n	80003a6 <fsm_automatic_run+0x8e>
				status = AUTO_RED_YELLOW;
 8000398:	4b5d      	ldr	r3, [pc, #372]	; (8000510 <fsm_automatic_run+0x1f8>)
 800039a:	2202      	movs	r2, #2
 800039c:	601a      	str	r2, [r3, #0]
				light_traffic_y_countdown = yellow_duration; //set from ms to s
 800039e:	4b61      	ldr	r3, [pc, #388]	; (8000524 <fsm_automatic_run+0x20c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a63      	ldr	r2, [pc, #396]	; (8000530 <fsm_automatic_run+0x218>)
 80003a4:	6013      	str	r3, [r2, #0]
			}
			//display LED7SEG
			display7SEG_X(light_traffic_x_countdown);
 80003a6:	4b61      	ldr	r3, [pc, #388]	; (800052c <fsm_automatic_run+0x214>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fbb6 	bl	8000b1c <display7SEG_X>
			display7SEG_Y(light_traffic_y_countdown);
 80003b0:	4b5f      	ldr	r3, [pc, #380]	; (8000530 <fsm_automatic_run+0x218>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fbe5 	bl	8000b84 <display7SEG_Y>

			////////////////////////////////////////////
			if (isButtonPress(BT1)){
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff fec6 	bl	800014c <isButtonPress>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f000 809b 	beq.w	80004fe <fsm_automatic_run+0x1e6>
				status = MAN_RED;
 80003c8:	4b51      	ldr	r3, [pc, #324]	; (8000510 <fsm_automatic_run+0x1f8>)
 80003ca:	220a      	movs	r2, #10
 80003cc:	601a      	str	r2, [r3, #0]
				clear_all();
 80003ce:	f000 fb23 	bl	8000a18 <clear_all>
				clear_red_green_yellow();
 80003d2:	f001 f82b 	bl	800142c <clear_red_green_yellow>
				setTimer(LED7SEG, led7duration);
 80003d6:	4b57      	ldr	r3, [pc, #348]	; (8000534 <fsm_automatic_run+0x21c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4619      	mov	r1, r3
 80003dc:	2009      	movs	r0, #9
 80003de:	f000 feb9 	bl	8001154 <setTimer>
			}
			break;
 80003e2:	e08c      	b.n	80004fe <fsm_automatic_run+0x1e6>
		case AUTO_RED_YELLOW:
			//TODO
			light_traffic_redX();
 80003e4:	f000 ff62 	bl	80012ac <light_traffic_redX>
			light_traffic_yellowY();
 80003e8:	f000 ffc0 	bl	800136c <light_traffic_yellowY>
			// change status condition
			count_second_by_timer7SEG_auto(); //count second
 80003ec:	f7ff ff72 	bl	80002d4 <count_second_by_timer7SEG_auto>
			// change status
			if (light_traffic_x_countdown == 0 || light_traffic_y_countdown == 0){
 80003f0:	4b4e      	ldr	r3, [pc, #312]	; (800052c <fsm_automatic_run+0x214>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d003      	beq.n	8000400 <fsm_automatic_run+0xe8>
 80003f8:	4b4d      	ldr	r3, [pc, #308]	; (8000530 <fsm_automatic_run+0x218>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d10a      	bne.n	8000416 <fsm_automatic_run+0xfe>
				status = AUTO_GREEN_RED;
 8000400:	4b43      	ldr	r3, [pc, #268]	; (8000510 <fsm_automatic_run+0x1f8>)
 8000402:	2203      	movs	r2, #3
 8000404:	601a      	str	r2, [r3, #0]
				light_traffic_x_countdown = green_duration;//set from ms to s
 8000406:	4b45      	ldr	r3, [pc, #276]	; (800051c <fsm_automatic_run+0x204>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a48      	ldr	r2, [pc, #288]	; (800052c <fsm_automatic_run+0x214>)
 800040c:	6013      	str	r3, [r2, #0]
				light_traffic_y_countdown = red_duration; //set from ms to s
 800040e:	4b41      	ldr	r3, [pc, #260]	; (8000514 <fsm_automatic_run+0x1fc>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a47      	ldr	r2, [pc, #284]	; (8000530 <fsm_automatic_run+0x218>)
 8000414:	6013      	str	r3, [r2, #0]
			}
			//display LED7SEG
			display7SEG_X(light_traffic_x_countdown);
 8000416:	4b45      	ldr	r3, [pc, #276]	; (800052c <fsm_automatic_run+0x214>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fb7e 	bl	8000b1c <display7SEG_X>
			display7SEG_Y(light_traffic_y_countdown);
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <fsm_automatic_run+0x218>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fbad 	bl	8000b84 <display7SEG_Y>

			if (isButtonPress(BT1)){
 800042a:	2000      	movs	r0, #0
 800042c:	f7ff fe8e 	bl	800014c <isButtonPress>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d065      	beq.n	8000502 <fsm_automatic_run+0x1ea>
				status = MAN_RED;
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <fsm_automatic_run+0x1f8>)
 8000438:	220a      	movs	r2, #10
 800043a:	601a      	str	r2, [r3, #0]
				clear_all(); // disable EN
 800043c:	f000 faec 	bl	8000a18 <clear_all>
				clear_red_green_yellow();
 8000440:	f000 fff4 	bl	800142c <clear_red_green_yellow>
			}
			break;
 8000444:	e05d      	b.n	8000502 <fsm_automatic_run+0x1ea>
		case AUTO_GREEN_RED:
			//TODO
			light_traffic_greenX();
 8000446:	f000 ff61 	bl	800130c <light_traffic_greenX>
			light_traffic_redY();
 800044a:	f000 ff77 	bl	800133c <light_traffic_redY>
			// change status condition
//			if (flag_timer[LED7SEG]){
			count_second_by_timer7SEG_auto(); //count second
 800044e:	f7ff ff41 	bl	80002d4 <count_second_by_timer7SEG_auto>
			// change status
			if (light_traffic_x_countdown == 0){
 8000452:	4b36      	ldr	r3, [pc, #216]	; (800052c <fsm_automatic_run+0x214>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d106      	bne.n	8000468 <fsm_automatic_run+0x150>
				status = AUTO_YELLOW_RED;
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <fsm_automatic_run+0x1f8>)
 800045c:	2204      	movs	r2, #4
 800045e:	601a      	str	r2, [r3, #0]
				light_traffic_x_countdown = yellow_duration;//set from ms to s
 8000460:	4b30      	ldr	r3, [pc, #192]	; (8000524 <fsm_automatic_run+0x20c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a31      	ldr	r2, [pc, #196]	; (800052c <fsm_automatic_run+0x214>)
 8000466:	6013      	str	r3, [r2, #0]
			}
			//display LED7SEG
			display7SEG_X(light_traffic_x_countdown);
 8000468:	4b30      	ldr	r3, [pc, #192]	; (800052c <fsm_automatic_run+0x214>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fb55 	bl	8000b1c <display7SEG_X>
			display7SEG_Y(light_traffic_y_countdown);
 8000472:	4b2f      	ldr	r3, [pc, #188]	; (8000530 <fsm_automatic_run+0x218>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fb84 	bl	8000b84 <display7SEG_Y>
			//}
			if (isButtonPress(BT1)){
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe65 	bl	800014c <isButtonPress>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d03e      	beq.n	8000506 <fsm_automatic_run+0x1ee>
				status = MAN_RED;
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <fsm_automatic_run+0x1f8>)
 800048a:	220a      	movs	r2, #10
 800048c:	601a      	str	r2, [r3, #0]
				clear_all();
 800048e:	f000 fac3 	bl	8000a18 <clear_all>
				clear_red_green_yellow();
 8000492:	f000 ffcb 	bl	800142c <clear_red_green_yellow>
			}
			break;
 8000496:	e036      	b.n	8000506 <fsm_automatic_run+0x1ee>
		case AUTO_YELLOW_RED:
			//TODO
			light_traffic_yellowX();
 8000498:	f000 ff20 	bl	80012dc <light_traffic_yellowX>
			light_traffic_redY();
 800049c:	f000 ff4e 	bl	800133c <light_traffic_redY>
			// change status condition

			count_second_by_timer7SEG_auto(); //count second
 80004a0:	f7ff ff18 	bl	80002d4 <count_second_by_timer7SEG_auto>
			// change status
			if (light_traffic_x_countdown == 0 || light_traffic_y_countdown == 0){
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <fsm_automatic_run+0x214>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d003      	beq.n	80004b4 <fsm_automatic_run+0x19c>
 80004ac:	4b20      	ldr	r3, [pc, #128]	; (8000530 <fsm_automatic_run+0x218>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d10a      	bne.n	80004ca <fsm_automatic_run+0x1b2>
				status = AUTO_RED_GREEN;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <fsm_automatic_run+0x1f8>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	601a      	str	r2, [r3, #0]
				light_traffic_x_countdown = red_duration;
 80004ba:	4b16      	ldr	r3, [pc, #88]	; (8000514 <fsm_automatic_run+0x1fc>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <fsm_automatic_run+0x214>)
 80004c0:	6013      	str	r3, [r2, #0]
				light_traffic_y_countdown = green_duration;
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <fsm_automatic_run+0x204>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <fsm_automatic_run+0x218>)
 80004c8:	6013      	str	r3, [r2, #0]
			}
			//display LED7SEG
			display7SEG_X(light_traffic_x_countdown);
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <fsm_automatic_run+0x214>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fb24 	bl	8000b1c <display7SEG_X>
			display7SEG_Y(light_traffic_y_countdown);
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <fsm_automatic_run+0x218>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fb53 	bl	8000b84 <display7SEG_Y>
			if (isButtonPress(BT1)){
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff fe34 	bl	800014c <isButtonPress>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00f      	beq.n	800050a <fsm_automatic_run+0x1f2>
				status = MAN_RED;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <fsm_automatic_run+0x1f8>)
 80004ec:	220a      	movs	r2, #10
 80004ee:	601a      	str	r2, [r3, #0]
				clear_all();
 80004f0:	f000 fa92 	bl	8000a18 <clear_all>
				clear_red_green_yellow();
 80004f4:	f000 ff9a 	bl	800142c <clear_red_green_yellow>
			}
			break;
 80004f8:	e007      	b.n	800050a <fsm_automatic_run+0x1f2>
		default:
			break;
 80004fa:	bf00      	nop
 80004fc:	e006      	b.n	800050c <fsm_automatic_run+0x1f4>
			break;
 80004fe:	bf00      	nop
 8000500:	e004      	b.n	800050c <fsm_automatic_run+0x1f4>
			break;
 8000502:	bf00      	nop
 8000504:	e002      	b.n	800050c <fsm_automatic_run+0x1f4>
			break;
 8000506:	bf00      	nop
 8000508:	e000      	b.n	800050c <fsm_automatic_run+0x1f4>
			break;
 800050a:	bf00      	nop
	}
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000070 	.word	0x20000070
 8000514:	20000074 	.word	0x20000074
 8000518:	20000080 	.word	0x20000080
 800051c:	20000078 	.word	0x20000078
 8000520:	20000084 	.word	0x20000084
 8000524:	2000007c 	.word	0x2000007c
 8000528:	20000088 	.word	0x20000088
 800052c:	20000090 	.word	0x20000090
 8000530:	20000094 	.word	0x20000094
 8000534:	20000034 	.word	0x20000034

08000538 <fsm_manual_run>:
#include "fsm_manual.h"




void fsm_manual_run(){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	switch (status) {
 800053c:	4b43      	ldr	r3, [pc, #268]	; (800064c <fsm_manual_run+0x114>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b0c      	cmp	r3, #12
 8000542:	d054      	beq.n	80005ee <fsm_manual_run+0xb6>
 8000544:	2b0c      	cmp	r3, #12
 8000546:	dc77      	bgt.n	8000638 <fsm_manual_run+0x100>
 8000548:	2b0a      	cmp	r3, #10
 800054a:	d002      	beq.n	8000552 <fsm_manual_run+0x1a>
 800054c:	2b0b      	cmp	r3, #11
 800054e:	d027      	beq.n	80005a0 <fsm_manual_run+0x68>
					yellow_edit = 1;
//				setTimer(LED7SEG, led7duration);
			}
			break;
		default:
			break;
 8000550:	e072      	b.n	8000638 <fsm_manual_run+0x100>
			check_timer_and_display(2, red_duration);
 8000552:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <fsm_manual_run+0x118>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4619      	mov	r1, r3
 8000558:	2002      	movs	r0, #2
 800055a:	f000 f925 	bl	80007a8 <check_timer_and_display>
			if (isButtonPress(BT1)){
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff fdf4 	bl	800014c <isButtonPress>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d004      	beq.n	8000574 <fsm_manual_run+0x3c>
				status = MAN_GREEN;
 800056a:	4b38      	ldr	r3, [pc, #224]	; (800064c <fsm_manual_run+0x114>)
 800056c:	220b      	movs	r2, #11
 800056e:	601a      	str	r2, [r3, #0]
				clear_red_green_yellow();
 8000570:	f000 ff5c 	bl	800142c <clear_red_green_yellow>
			if (isButtonPress(BT2)){
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff fde9 	bl	800014c <isButtonPress>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d05d      	beq.n	800063c <fsm_manual_run+0x104>
				status = EDIT_RED;
 8000580:	4b32      	ldr	r3, [pc, #200]	; (800064c <fsm_manual_run+0x114>)
 8000582:	2214      	movs	r2, #20
 8000584:	601a      	str	r2, [r3, #0]
				red_edit++;
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <fsm_manual_run+0x11c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a31      	ldr	r2, [pc, #196]	; (8000654 <fsm_manual_run+0x11c>)
 800058e:	6013      	str	r3, [r2, #0]
				if (red_edit > 99)
 8000590:	4b30      	ldr	r3, [pc, #192]	; (8000654 <fsm_manual_run+0x11c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b63      	cmp	r3, #99	; 0x63
 8000596:	dd51      	ble.n	800063c <fsm_manual_run+0x104>
					red_edit = 1;
 8000598:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <fsm_manual_run+0x11c>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
			break;
 800059e:	e04d      	b.n	800063c <fsm_manual_run+0x104>
			check_timer_and_display(3, green_duration);
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <fsm_manual_run+0x120>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 f8fe 	bl	80007a8 <check_timer_and_display>
			if (isButtonPress(BT1)){
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff fdcd 	bl	800014c <isButtonPress>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d004      	beq.n	80005c2 <fsm_manual_run+0x8a>
				status = MAN_YELLOW;
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <fsm_manual_run+0x114>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
				clear_red_green_yellow();
 80005be:	f000 ff35 	bl	800142c <clear_red_green_yellow>
			if (isButtonPress(BT2)){
 80005c2:	2001      	movs	r0, #1
 80005c4:	f7ff fdc2 	bl	800014c <isButtonPress>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d038      	beq.n	8000640 <fsm_manual_run+0x108>
				status = EDIT_GREEN;
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <fsm_manual_run+0x114>)
 80005d0:	2215      	movs	r2, #21
 80005d2:	601a      	str	r2, [r3, #0]
				green_edit++;
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <fsm_manual_run+0x124>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a20      	ldr	r2, [pc, #128]	; (800065c <fsm_manual_run+0x124>)
 80005dc:	6013      	str	r3, [r2, #0]
				if (green_edit > 99)
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <fsm_manual_run+0x124>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b63      	cmp	r3, #99	; 0x63
 80005e4:	dd2c      	ble.n	8000640 <fsm_manual_run+0x108>
					green_edit = 1;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <fsm_manual_run+0x124>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
			break;
 80005ec:	e028      	b.n	8000640 <fsm_manual_run+0x108>
			check_timer_and_display(4, yellow_duration);
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <fsm_manual_run+0x128>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	2004      	movs	r0, #4
 80005f6:	f000 f8d7 	bl	80007a8 <check_timer_and_display>
			if (isButtonPress(BT1)){
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff fda6 	bl	800014c <isButtonPress>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <fsm_manual_run+0xd4>
				status = INIT;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <fsm_manual_run+0x114>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
			if (isButtonPress(BT2)){
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff fd9d 	bl	800014c <isButtonPress>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d015      	beq.n	8000644 <fsm_manual_run+0x10c>
				status = EDIT_YELLOW;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <fsm_manual_run+0x114>)
 800061a:	2216      	movs	r2, #22
 800061c:	601a      	str	r2, [r3, #0]
				yellow_edit++;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <fsm_manual_run+0x12c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <fsm_manual_run+0x12c>)
 8000626:	6013      	str	r3, [r2, #0]
				if (yellow_edit > 99)
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <fsm_manual_run+0x12c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b63      	cmp	r3, #99	; 0x63
 800062e:	dd09      	ble.n	8000644 <fsm_manual_run+0x10c>
					yellow_edit = 1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <fsm_manual_run+0x12c>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
			break;
 8000636:	e005      	b.n	8000644 <fsm_manual_run+0x10c>
			break;
 8000638:	bf00      	nop
 800063a:	e004      	b.n	8000646 <fsm_manual_run+0x10e>
			break;
 800063c:	bf00      	nop
 800063e:	e002      	b.n	8000646 <fsm_manual_run+0x10e>
			break;
 8000640:	bf00      	nop
 8000642:	e000      	b.n	8000646 <fsm_manual_run+0x10e>
			break;
 8000644:	bf00      	nop
	}
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000070 	.word	0x20000070
 8000650:	20000074 	.word	0x20000074
 8000654:	20000080 	.word	0x20000080
 8000658:	20000078 	.word	0x20000078
 800065c:	20000084 	.word	0x20000084
 8000660:	2000007c 	.word	0x2000007c
 8000664:	20000088 	.word	0x20000088

08000668 <fsm_setting_run>:
 */


#include "fsm_setting.h"

void fsm_setting_run(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	switch (status) {
 800066c:	4b47      	ldr	r3, [pc, #284]	; (800078c <fsm_setting_run+0x124>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b16      	cmp	r3, #22
 8000672:	d058      	beq.n	8000726 <fsm_setting_run+0xbe>
 8000674:	2b16      	cmp	r3, #22
 8000676:	dc7f      	bgt.n	8000778 <fsm_setting_run+0x110>
 8000678:	2b14      	cmp	r3, #20
 800067a:	d002      	beq.n	8000682 <fsm_setting_run+0x1a>
 800067c:	2b15      	cmp	r3, #21
 800067e:	d029      	beq.n	80006d4 <fsm_setting_run+0x6c>
//				setTimer(LED7SEG, led7duration);
			}

			break;
		default:
			break;
 8000680:	e07a      	b.n	8000778 <fsm_setting_run+0x110>
			check_timer_and_display(2, red_edit);
 8000682:	4b43      	ldr	r3, [pc, #268]	; (8000790 <fsm_setting_run+0x128>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	2002      	movs	r0, #2
 800068a:	f000 f88d 	bl	80007a8 <check_timer_and_display>
			if (isButtonPress(BT1)){} // use for turn of flag
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff fd5c 	bl	800014c <isButtonPress>
			if (isButtonPress(BT2)){
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff fd59 	bl	800014c <isButtonPress>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00b      	beq.n	80006b8 <fsm_setting_run+0x50>
				red_edit++;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <fsm_setting_run+0x128>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a3a      	ldr	r2, [pc, #232]	; (8000790 <fsm_setting_run+0x128>)
 80006a8:	6013      	str	r3, [r2, #0]
				if (red_edit > 99)
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <fsm_setting_run+0x128>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b63      	cmp	r3, #99	; 0x63
 80006b0:	dd02      	ble.n	80006b8 <fsm_setting_run+0x50>
					red_edit = 1;
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <fsm_setting_run+0x128>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
			if (isButtonPress(BT3)){
 80006b8:	2002      	movs	r0, #2
 80006ba:	f7ff fd47 	bl	800014c <isButtonPress>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d05b      	beq.n	800077c <fsm_setting_run+0x114>
				red_duration = red_edit;
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <fsm_setting_run+0x128>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <fsm_setting_run+0x12c>)
 80006ca:	6013      	str	r3, [r2, #0]
				status = MAN_RED;
 80006cc:	4b2f      	ldr	r3, [pc, #188]	; (800078c <fsm_setting_run+0x124>)
 80006ce:	220a      	movs	r2, #10
 80006d0:	601a      	str	r2, [r3, #0]
			break;
 80006d2:	e053      	b.n	800077c <fsm_setting_run+0x114>
			if (isButtonPress(BT1)){} // use for turn of flag
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fd39 	bl	800014c <isButtonPress>
			check_timer_and_display(3, green_edit);
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <fsm_setting_run+0x130>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4619      	mov	r1, r3
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f861 	bl	80007a8 <check_timer_and_display>
			if (isButtonPress(BT2)){
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fd30 	bl	800014c <isButtonPress>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d00b      	beq.n	800070a <fsm_setting_run+0xa2>
				green_edit++;
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <fsm_setting_run+0x130>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <fsm_setting_run+0x130>)
 80006fa:	6013      	str	r3, [r2, #0]
				if (green_edit > 99)
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <fsm_setting_run+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b63      	cmp	r3, #99	; 0x63
 8000702:	dd02      	ble.n	800070a <fsm_setting_run+0xa2>
					green_edit = 1;
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <fsm_setting_run+0x130>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
			if (isButtonPress(BT3)){
 800070a:	2002      	movs	r0, #2
 800070c:	f7ff fd1e 	bl	800014c <isButtonPress>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d034      	beq.n	8000780 <fsm_setting_run+0x118>
				green_duration = green_edit;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <fsm_setting_run+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <fsm_setting_run+0x134>)
 800071c:	6013      	str	r3, [r2, #0]
				status = MAN_GREEN;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <fsm_setting_run+0x124>)
 8000720:	220b      	movs	r2, #11
 8000722:	601a      	str	r2, [r3, #0]
			break;
 8000724:	e02c      	b.n	8000780 <fsm_setting_run+0x118>
			check_timer_and_display(4, yellow_edit);
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <fsm_setting_run+0x138>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	2004      	movs	r0, #4
 800072e:	f000 f83b 	bl	80007a8 <check_timer_and_display>
			if (isButtonPress(BT1)){} // use for turn of flag
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fd0a 	bl	800014c <isButtonPress>
			if (isButtonPress(BT2)){
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fd07 	bl	800014c <isButtonPress>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00b      	beq.n	800075c <fsm_setting_run+0xf4>
				yellow_edit++;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <fsm_setting_run+0x138>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <fsm_setting_run+0x138>)
 800074c:	6013      	str	r3, [r2, #0]
				if (yellow_edit > 99)
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <fsm_setting_run+0x138>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b63      	cmp	r3, #99	; 0x63
 8000754:	dd02      	ble.n	800075c <fsm_setting_run+0xf4>
					yellow_edit = 1;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <fsm_setting_run+0x138>)
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
			if (isButtonPress(BT3)){
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff fcf5 	bl	800014c <isButtonPress>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00d      	beq.n	8000784 <fsm_setting_run+0x11c>
				yellow_duration = yellow_edit;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <fsm_setting_run+0x138>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <fsm_setting_run+0x13c>)
 800076e:	6013      	str	r3, [r2, #0]
				status = MAN_YELLOW;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <fsm_setting_run+0x124>)
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
			break;
 8000776:	e005      	b.n	8000784 <fsm_setting_run+0x11c>
			break;
 8000778:	bf00      	nop
 800077a:	e004      	b.n	8000786 <fsm_setting_run+0x11e>
			break;
 800077c:	bf00      	nop
 800077e:	e002      	b.n	8000786 <fsm_setting_run+0x11e>
			break;
 8000780:	bf00      	nop
 8000782:	e000      	b.n	8000786 <fsm_setting_run+0x11e>
			break;
 8000784:	bf00      	nop
	}
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000070 	.word	0x20000070
 8000790:	20000080 	.word	0x20000080
 8000794:	20000074 	.word	0x20000074
 8000798:	20000084 	.word	0x20000084
 800079c:	20000078 	.word	0x20000078
 80007a0:	20000088 	.word	0x20000088
 80007a4:	2000007c 	.word	0x2000007c

080007a8 <check_timer_and_display>:


int light_traffic_x_countdown = 0;
int light_traffic_y_countdown = 0;

void check_timer_and_display(int mode, int duration){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	count_timer_7SEG++;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <check_timer_and_display+0x64>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <check_timer_and_display+0x64>)
 80007ba:	6013      	str	r3, [r2, #0]
	if (count_timer_7SEG >= 4)
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <check_timer_and_display+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	dd02      	ble.n	80007ca <check_timer_and_display+0x22>
		count_timer_7SEG = 0;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <check_timer_and_display+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
	if (count_timer_7SEG % 2 == 0){
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <check_timer_and_display+0x64>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d110      	bne.n	80007f8 <check_timer_and_display+0x50>
		if (mode == 2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d102      	bne.n	80007e2 <check_timer_and_display+0x3a>
			toggle_all_red();
 80007dc:	f000 fdf6 	bl	80013cc <toggle_all_red>
 80007e0:	e00a      	b.n	80007f8 <check_timer_and_display+0x50>
		else if (mode == 3)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d102      	bne.n	80007ee <check_timer_and_display+0x46>
			toggle_all_green();
 80007e8:	f000 fe00 	bl	80013ec <toggle_all_green>
 80007ec:	e004      	b.n	80007f8 <check_timer_and_display+0x50>
		else if (mode == 4)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d101      	bne.n	80007f8 <check_timer_and_display+0x50>
			toggle_all_yellow();
 80007f4:	f000 fe0a 	bl	800140c <toggle_all_yellow>
		else ;
	}

	display7SEG_X(mode);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f98f 	bl	8000b1c <display7SEG_X>
	display7SEG_Y(duration);
 80007fe:	6838      	ldr	r0, [r7, #0]
 8000800:	f000 f9c0 	bl	8000b84 <display7SEG_Y>

}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000008c 	.word	0x2000008c

08000810 <display7SEG>:
 */


#include "led7_segment.h"

void display7SEG(int num){
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	//use  BCD decoder
	int A,B,C,D;
	A = (num >> 3) & 1; //MSB
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	10db      	asrs	r3, r3, #3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
	B = (num >> 2) & 1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	109b      	asrs	r3, r3, #2
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
	C = (num >> 1) & 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	105b      	asrs	r3, r3, #1
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
	D = (num >> 0) & 1; // LSB
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28

	int a,b,c,d,e,f,g;

	a =  C || A || (!B && !D) || (B && D);
 800083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10e      	bne.n	8000862 <display7SEG+0x52>
 8000844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10b      	bne.n	8000862 <display7SEG+0x52>
 800084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <display7SEG+0x46>
 8000850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000852:	2b00      	cmp	r3, #0
 8000854:	d005      	beq.n	8000862 <display7SEG+0x52>
 8000856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <display7SEG+0x56>
 800085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <display7SEG+0x56>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <display7SEG+0x58>
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
	b = !B || (C && D) || (!C && !D);
 800086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <display7SEG+0x78>
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <display7SEG+0x6c>
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <display7SEG+0x78>
 800087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <display7SEG+0x7c>
 8000882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000884:	2b00      	cmp	r3, #0
 8000886:	d101      	bne.n	800088c <display7SEG+0x7c>
 8000888:	2301      	movs	r3, #1
 800088a:	e000      	b.n	800088e <display7SEG+0x7e>
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
	c = !C || B || D;
 8000890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <display7SEG+0x92>
 8000896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <display7SEG+0x92>
 800089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <display7SEG+0x96>
 80008a2:	2301      	movs	r3, #1
 80008a4:	e000      	b.n	80008a8 <display7SEG+0x98>
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
	d =  A || (!B && !D) || (!B && C) || (C && !D) || (B && !C && D);
 80008aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d11a      	bne.n	80008e6 <display7SEG+0xd6>
 80008b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <display7SEG+0xac>
 80008b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d014      	beq.n	80008e6 <display7SEG+0xd6>
 80008bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <display7SEG+0xb8>
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10e      	bne.n	80008e6 <display7SEG+0xd6>
 80008c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <display7SEG+0xc4>
 80008ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d008      	beq.n	80008e6 <display7SEG+0xd6>
 80008d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d007      	beq.n	80008ea <display7SEG+0xda>
 80008da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d104      	bne.n	80008ea <display7SEG+0xda>
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <display7SEG+0xda>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <display7SEG+0xdc>
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
	e = (!B && !D) || (C && !D);
 80008ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <display7SEG+0xea>
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d005      	beq.n	8000906 <display7SEG+0xf6>
 80008fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d004      	beq.n	800090a <display7SEG+0xfa>
 8000900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <display7SEG+0xfa>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <display7SEG+0xfc>
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
	f =  A || (B && !D) || (!C && !D) || (B && !C);
 800090e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000910:	2b00      	cmp	r3, #0
 8000912:	d111      	bne.n	8000938 <display7SEG+0x128>
 8000914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <display7SEG+0x110>
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00b      	beq.n	8000938 <display7SEG+0x128>
 8000920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <display7SEG+0x11c>
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	2b00      	cmp	r3, #0
 800092a:	d005      	beq.n	8000938 <display7SEG+0x128>
 800092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092e:	2b00      	cmp	r3, #0
 8000930:	d004      	beq.n	800093c <display7SEG+0x12c>
 8000932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000934:	2b00      	cmp	r3, #0
 8000936:	d101      	bne.n	800093c <display7SEG+0x12c>
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <display7SEG+0x12e>
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
	g =  A || (!B && C) || (B && !D) || (B && !C);
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	2b00      	cmp	r3, #0
 8000944:	d111      	bne.n	800096a <display7SEG+0x15a>
 8000946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <display7SEG+0x142>
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10b      	bne.n	800096a <display7SEG+0x15a>
 8000952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <display7SEG+0x14e>
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <display7SEG+0x15a>
 800095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000960:	2b00      	cmp	r3, #0
 8000962:	d004      	beq.n	800096e <display7SEG+0x15e>
 8000964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <display7SEG+0x15e>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <display7SEG+0x160>
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, !a);
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf0c      	ite	eq
 8000978:	2301      	moveq	r3, #1
 800097a:	2300      	movne	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	2101      	movs	r1, #1
 8000982:	4824      	ldr	r0, [pc, #144]	; (8000a14 <display7SEG+0x204>)
 8000984:	f001 f8ad 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, !b);
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	2b00      	cmp	r3, #0
 800098c:	bf0c      	ite	eq
 800098e:	2301      	moveq	r3, #1
 8000990:	2300      	movne	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	2102      	movs	r1, #2
 8000998:	481e      	ldr	r0, [pc, #120]	; (8000a14 <display7SEG+0x204>)
 800099a:	f001 f8a2 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, !c);
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf0c      	ite	eq
 80009a4:	2301      	moveq	r3, #1
 80009a6:	2300      	movne	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	2104      	movs	r1, #4
 80009ae:	4819      	ldr	r0, [pc, #100]	; (8000a14 <display7SEG+0x204>)
 80009b0:	f001 f897 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, !d);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf0c      	ite	eq
 80009ba:	2301      	moveq	r3, #1
 80009bc:	2300      	movne	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	2108      	movs	r1, #8
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <display7SEG+0x204>)
 80009c6:	f001 f88c 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, !e);
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf0c      	ite	eq
 80009d0:	2301      	moveq	r3, #1
 80009d2:	2300      	movne	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	2110      	movs	r1, #16
 80009da:	480e      	ldr	r0, [pc, #56]	; (8000a14 <display7SEG+0x204>)
 80009dc:	f001 f881 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, !f);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf0c      	ite	eq
 80009e6:	2301      	moveq	r3, #1
 80009e8:	2300      	movne	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	2120      	movs	r1, #32
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <display7SEG+0x204>)
 80009f2:	f001 f876 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, !g);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bf0c      	ite	eq
 80009fc:	2301      	moveq	r3, #1
 80009fe:	2300      	movne	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <display7SEG+0x204>)
 8000a08:	f001 f86b 	bl	8001ae2 <HAL_GPIO_WritePin>

}
 8000a0c:	bf00      	nop
 8000a0e:	3738      	adds	r7, #56	; 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <clear_all>:
void clear_all(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin , SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <clear_all+0x30>)
 8000a22:	f001 f85e 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin , SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2104      	movs	r1, #4
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <clear_all+0x30>)
 8000a2c:	f001 f859 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin , SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2108      	movs	r1, #8
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <clear_all+0x30>)
 8000a36:	f001 f854 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin , SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	4802      	ldr	r0, [pc, #8]	; (8000a48 <clear_all+0x30>)
 8000a40:	f001 f84f 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40010800 	.word	0x40010800

08000a4c <turn_on_1>:


void turn_on_1(){ //7-segment led first
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin , RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2102      	movs	r1, #2
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <turn_on_1+0x30>)
 8000a56:	f001 f844 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin , SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <turn_on_1+0x30>)
 8000a60:	f001 f83f 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin , SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <turn_on_1+0x30>)
 8000a6a:	f001 f83a 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin , SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2110      	movs	r1, #16
 8000a72:	4802      	ldr	r0, [pc, #8]	; (8000a7c <turn_on_1+0x30>)
 8000a74:	f001 f835 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40010800 	.word	0x40010800

08000a80 <turn_on_2>:


void turn_on_2(){ //7-segment led second
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin , SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2102      	movs	r1, #2
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <turn_on_2+0x30>)
 8000a8a:	f001 f82a 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin , RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2104      	movs	r1, #4
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <turn_on_2+0x30>)
 8000a94:	f001 f825 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin , SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <turn_on_2+0x30>)
 8000a9e:	f001 f820 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin , SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <turn_on_2+0x30>)
 8000aa8:	f001 f81b 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010800 	.word	0x40010800

08000ab4 <turn_on_3>:

void turn_on_3(){ //7-segment led third
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin , SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2102      	movs	r1, #2
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <turn_on_3+0x30>)
 8000abe:	f001 f810 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin , SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <turn_on_3+0x30>)
 8000ac8:	f001 f80b 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin , RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2108      	movs	r1, #8
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <turn_on_3+0x30>)
 8000ad2:	f001 f806 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin , SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2110      	movs	r1, #16
 8000ada:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <turn_on_3+0x30>)
 8000adc:	f001 f801 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <turn_on_4>:

void turn_on_4(){ //7-segment led fourth
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin , SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2102      	movs	r1, #2
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <turn_on_4+0x30>)
 8000af2:	f000 fff6 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin , SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2104      	movs	r1, #4
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <turn_on_4+0x30>)
 8000afc:	f000 fff1 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin , SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2108      	movs	r1, #8
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <turn_on_4+0x30>)
 8000b06:	f000 ffec 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin , RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	4802      	ldr	r0, [pc, #8]	; (8000b18 <turn_on_4+0x30>)
 8000b10:	f000 ffe7 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010800 	.word	0x40010800

08000b1c <display7SEG_X>:

void display7SEG_X(int time){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	//time : time of way x traffic light count down has two digit ( 0<=XX<=99)
	int timeLed1 = time/10;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <display7SEG_X+0x60>)
 8000b28:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2c:	1092      	asrs	r2, r2, #2
 8000b2e:	17db      	asrs	r3, r3, #31
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	60fb      	str	r3, [r7, #12]
	int timeLed2 = time%10;
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <display7SEG_X+0x60>)
 8000b38:	fb83 1302 	smull	r1, r3, r3, r2
 8000b3c:	1099      	asrs	r1, r3, #2
 8000b3e:	17d3      	asrs	r3, r2, #31
 8000b40:	1ac9      	subs	r1, r1, r3
 8000b42:	460b      	mov	r3, r1
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	60bb      	str	r3, [r7, #8]
	if (count_timer_7SEG == 0){
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <display7SEG_X+0x64>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d104      	bne.n	8000b60 <display7SEG_X+0x44>
		display7SEG(timeLed1);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fe5a 	bl	8000810 <display7SEG>
		turn_on_1();
 8000b5c:	f7ff ff76 	bl	8000a4c <turn_on_1>
	}
	if (count_timer_7SEG == 1){
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <display7SEG_X+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <display7SEG_X+0x56>
		display7SEG(timeLed2);
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f7ff fe51 	bl	8000810 <display7SEG>
		turn_on_2();
 8000b6e:	f7ff ff87 	bl	8000a80 <turn_on_2>
	}
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	66666667 	.word	0x66666667
 8000b80:	2000008c 	.word	0x2000008c

08000b84 <display7SEG_Y>:


void display7SEG_Y(int time){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	//time : time of way x traffic light count down has two digit ( 0<=XX<=99)
	int timeLed3 = time/10;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <display7SEG_Y+0x60>)
 8000b90:	fb82 1203 	smull	r1, r2, r2, r3
 8000b94:	1092      	asrs	r2, r2, #2
 8000b96:	17db      	asrs	r3, r3, #31
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	60fb      	str	r3, [r7, #12]
	int timeLed4 = time%10;
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <display7SEG_Y+0x60>)
 8000ba0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba4:	1099      	asrs	r1, r3, #2
 8000ba6:	17d3      	asrs	r3, r2, #31
 8000ba8:	1ac9      	subs	r1, r1, r3
 8000baa:	460b      	mov	r3, r1
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	60bb      	str	r3, [r7, #8]
	if (count_timer_7SEG == 2){
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <display7SEG_Y+0x64>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d104      	bne.n	8000bc8 <display7SEG_Y+0x44>
		display7SEG(timeLed3);
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fe26 	bl	8000810 <display7SEG>
		turn_on_3();
 8000bc4:	f7ff ff76 	bl	8000ab4 <turn_on_3>
	}
	if (count_timer_7SEG == 3){
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <display7SEG_Y+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d104      	bne.n	8000bda <display7SEG_Y+0x56>
		display7SEG(timeLed4);
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fe1d 	bl	8000810 <display7SEG>
		turn_on_4();
 8000bd6:	f7ff ff87 	bl	8000ae8 <turn_on_4>
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	66666667 	.word	0x66666667
 8000be8:	2000008c 	.word	0x2000008c

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 fc76 	bl	80014e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f848 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 f8ce 	bl	8000d98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bfc:	f000 f880 	bl	8000d00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2);
 8000c00:	4817      	ldr	r0, [pc, #92]	; (8000c60 <main+0x74>)
 8000c02:	f001 fbcb 	bl	800239c <HAL_TIM_Base_Start_IT>

  status = INIT;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <main+0x78>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
  red_duration = 5; //s
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <main+0x7c>)
 8000c0e:	2205      	movs	r2, #5
 8000c10:	601a      	str	r2, [r3, #0]
  green_duration = 3; //s
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <main+0x80>)
 8000c14:	2203      	movs	r2, #3
 8000c16:	601a      	str	r2, [r3, #0]
  yellow_duration = 2; //s
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <main+0x84>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */
	 // set up the scheduler
 SCH_INIT();
 8000c1e:	f000 f92e 	bl	8000e7e <SCH_INIT>
 SCH_Add_Task(unittest_blinky, 500, 500);
 8000c22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c26:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <main+0x88>)
 8000c2c:	f000 f93c 	bl	8000ea8 <SCH_Add_Task>
 SCH_Add_Task(fsm_automatic_run, 250, 250);
 8000c30:	22fa      	movs	r2, #250	; 0xfa
 8000c32:	21fa      	movs	r1, #250	; 0xfa
 8000c34:	4810      	ldr	r0, [pc, #64]	; (8000c78 <main+0x8c>)
 8000c36:	f000 f937 	bl	8000ea8 <SCH_Add_Task>
 SCH_Add_Task(fsm_manual_run, 250, 250);
 8000c3a:	22fa      	movs	r2, #250	; 0xfa
 8000c3c:	21fa      	movs	r1, #250	; 0xfa
 8000c3e:	480f      	ldr	r0, [pc, #60]	; (8000c7c <main+0x90>)
 8000c40:	f000 f932 	bl	8000ea8 <SCH_Add_Task>
 SCH_Add_Task(fsm_setting_run, 250, 250);
 8000c44:	22fa      	movs	r2, #250	; 0xfa
 8000c46:	21fa      	movs	r1, #250	; 0xfa
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <main+0x94>)
 8000c4a:	f000 f92d 	bl	8000ea8 <SCH_Add_Task>
 SCH_Add_Task(getKeyInput, 10, 10);
 8000c4e:	220a      	movs	r2, #10
 8000c50:	210a      	movs	r1, #10
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <main+0x98>)
 8000c54:	f000 f928 	bl	8000ea8 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 SCH_Dispatch_Tasks();
 8000c58:	f000 f9ee 	bl	8001038 <SCH_Dispatch_Tasks>
 8000c5c:	e7fc      	b.n	8000c58 <main+0x6c>
 8000c5e:	bf00      	nop
 8000c60:	20000098 	.word	0x20000098
 8000c64:	20000070 	.word	0x20000070
 8000c68:	20000074 	.word	0x20000074
 8000c6c:	20000078 	.word	0x20000078
 8000c70:	2000007c 	.word	0x2000007c
 8000c74:	08001481 	.word	0x08001481
 8000c78:	08000319 	.word	0x08000319
 8000c7c:	08000539 	.word	0x08000539
 8000c80:	08000669 	.word	0x08000669
 8000c84:	08000181 	.word	0x08000181

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 ff30 	bl	8002afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 ff40 	bl	8001b44 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cca:	f000 f8d3 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 f9ac 	bl	8002044 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cf2:	f000 f8bf 	bl	8000e74 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3740      	adds	r7, #64	; 0x40
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d34:	2209      	movs	r2, #9
 8000d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d46:	f001 fad9 	bl	80022fc <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d50:	f000 f890 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d62:	f001 fc57 	bl	8002614 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 f882 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d7e:	f001 fe2f 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f874 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000098 	.word	0x20000098

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f641 71be 	movw	r1, #8126	; 0x1fbe
 8000de2:	481d      	ldr	r0, [pc, #116]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000de4:	f000 fe7d 	bl	8001ae2 <HAL_GPIO_WritePin>
                          |LED_BLINKY_Pin|RED_Y_Pin|YELLOW_Y_Pin|GREEN_Y_Pin
                          |RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_TOGGLE_Pin
 8000de8:	2200      	movs	r2, #0
 8000dea:	f248 017f 	movw	r1, #32895	; 0x807f
 8000dee:	481b      	ldr	r0, [pc, #108]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000df0:	f000 fe77 	bl	8001ae2 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           LED_BLINKY_Pin RED_Y_Pin YELLOW_Y_Pin GREEN_Y_Pin
                           RED_X_Pin YELLOW_X_Pin GREEN_X_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8000df4:	f641 73be 	movw	r3, #8126	; 0x1fbe
 8000df8:	60bb      	str	r3, [r7, #8]
                          |LED_BLINKY_Pin|RED_Y_Pin|YELLOW_Y_Pin|GREEN_Y_Pin
                          |RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2302      	movs	r3, #2
 8000e04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000e0e:	f000 fcd7 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin LED_TOGGLE_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_TOGGLE_Pin
 8000e12:	f248 037f 	movw	r3, #32895	; 0x807f
 8000e16:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2302      	movs	r3, #2
 8000e22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000e2c:	f000 fcc8 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT3_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = BT3_Pin|BT1_Pin|BT2_Pin;
 8000e30:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000e46:	f000 fcbb 	bl	80017c0 <HAL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00

08000e60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e68:	f000 f876 	bl	8000f58 <SCH_Update>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>

08000e7e <SCH_INIT>:
#define RETURN_NORMAL 1
#define tick 10

sTask SCH_tasks_G[SCH_MAX_TASKS] ;

void SCH_INIT(){
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
	uint8_t index;
	for (index = 0; index < SCH_MAX_TASKS; index++){
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	e006      	b.n	8000e98 <SCH_INIT+0x1a>
		SCH_Delete_Task(index);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f91f 	bl	80010d0 <SCH_Delete_Task>
	for (index = 0; index < SCH_MAX_TASKS; index++){
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	3301      	adds	r3, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b27      	cmp	r3, #39	; 0x27
 8000e9c:	d9f5      	bls.n	8000e8a <SCH_INIT+0xc>
	}
	// Timer_Init();
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SCH_Add_Task>:

uint32_t SCH_Add_Task( void ( * pFunction) () , uint32_t DELAY, uint32_t PERIOD){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint8_t index = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS)){
 8000eb8:	e002      	b.n	8000ec0 <SCH_Add_Task+0x18>
		index++;
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS)){
 8000ec0:	7dfa      	ldrb	r2, [r7, #23]
 8000ec2:	4923      	ldr	r1, [pc, #140]	; (8000f50 <SCH_Add_Task+0xa8>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <SCH_Add_Task+0x32>
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b27      	cmp	r3, #39	; 0x27
 8000ed8:	d9ef      	bls.n	8000eba <SCH_Add_Task+0x12>
	}
	if (index == SCH_MAX_TASKS){
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2b28      	cmp	r3, #40	; 0x28
 8000ede:	d101      	bne.n	8000ee4 <SCH_Add_Task+0x3c>
		// return ERROR code
		return SCH_MAX_TASKS;
 8000ee0:	2328      	movs	r3, #40	; 0x28
 8000ee2:	e02f      	b.n	8000f44 <SCH_Add_Task+0x9c>
	}

	//normal
	SCH_tasks_G[index].pTask = pFunction;
 8000ee4:	7dfa      	ldrb	r2, [r7, #23]
 8000ee6:	491a      	ldr	r1, [pc, #104]	; (8000f50 <SCH_Add_Task+0xa8>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay = DELAY/tick;
 8000ef6:	7dfa      	ldrb	r2, [r7, #23]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4916      	ldr	r1, [pc, #88]	; (8000f54 <SCH_Add_Task+0xac>)
 8000efc:	fba1 1303 	umull	r1, r3, r1, r3
 8000f00:	08d9      	lsrs	r1, r3, #3
 8000f02:	4813      	ldr	r0, [pc, #76]	; (8000f50 <SCH_Add_Task+0xa8>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4403      	add	r3, r0
 8000f0e:	3304      	adds	r3, #4
 8000f10:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].Period = PERIOD/tick;
 8000f12:	7dfa      	ldrb	r2, [r7, #23]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	490f      	ldr	r1, [pc, #60]	; (8000f54 <SCH_Add_Task+0xac>)
 8000f18:	fba1 1303 	umull	r1, r3, r1, r3
 8000f1c:	08d9      	lsrs	r1, r3, #3
 8000f1e:	480c      	ldr	r0, [pc, #48]	; (8000f50 <SCH_Add_Task+0xa8>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4403      	add	r3, r0
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].RunMe = 0;
 8000f2e:	7dfa      	ldrb	r2, [r7, #23]
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <SCH_Add_Task+0xa8>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	330c      	adds	r3, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]

	return index;
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200000e0 	.word	0x200000e0
 8000f54:	cccccccd 	.word	0xcccccccd

08000f58 <SCH_Update>:


void SCH_Update(){
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
	// calculations are in *TICKS*
	uint8_t index;
	for (index = 0; index < SCH_MAX_TASKS; index++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	e05d      	b.n	8001020 <SCH_Update+0xc8>
		if (SCH_tasks_G[index].pTask){
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	4933      	ldr	r1, [pc, #204]	; (8001034 <SCH_Update+0xdc>)
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d050      	beq.n	800101a <SCH_Update+0xc2>
			if (SCH_tasks_G[index].Delay == 0){
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	492e      	ldr	r1, [pc, #184]	; (8001034 <SCH_Update+0xdc>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	3304      	adds	r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d132      	bne.n	8000ff4 <SCH_Update+0x9c>
				SCH_tasks_G[index].RunMe += 1;
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	4928      	ldr	r1, [pc, #160]	; (8001034 <SCH_Update+0xdc>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2d8      	uxtb	r0, r3
 8000fa6:	4923      	ldr	r1, [pc, #140]	; (8001034 <SCH_Update+0xdc>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[index].Period)
 8000fb8:	79fa      	ldrb	r2, [r7, #7]
 8000fba:	491e      	ldr	r1, [pc, #120]	; (8001034 <SCH_Update+0xdc>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d025      	beq.n	800101a <SCH_Update+0xc2>
					SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 8000fce:	79f9      	ldrb	r1, [r7, #7]
 8000fd0:	79fa      	ldrb	r2, [r7, #7]
 8000fd2:	4818      	ldr	r0, [pc, #96]	; (8001034 <SCH_Update+0xdc>)
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4403      	add	r3, r0
 8000fde:	3308      	adds	r3, #8
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <SCH_Update+0xdc>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4403      	add	r3, r0
 8000fee:	3304      	adds	r3, #4
 8000ff0:	6019      	str	r1, [r3, #0]
 8000ff2:	e012      	b.n	800101a <SCH_Update+0xc2>
			}
			else
				SCH_tasks_G[index].Delay -= 1;
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	490f      	ldr	r1, [pc, #60]	; (8001034 <SCH_Update+0xdc>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3304      	adds	r3, #4
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	1e59      	subs	r1, r3, #1
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <SCH_Update+0xdc>)
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4403      	add	r3, r0
 8001016:	3304      	adds	r3, #4
 8001018:	6019      	str	r1, [r3, #0]
	for (index = 0; index < SCH_MAX_TASKS; index++){
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	3301      	adds	r3, #1
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b27      	cmp	r3, #39	; 0x27
 8001024:	d99e      	bls.n	8000f64 <SCH_Update+0xc>
		}
	}
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200000e0 	.word	0x200000e0

08001038 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks (){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	uint8_t index;
	for (index = 0; index < SCH_MAX_TASKS; index++){
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e03a      	b.n	80010ba <SCH_Dispatch_Tasks+0x82>
		if (SCH_tasks_G[index].RunMe > 0){
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	4921      	ldr	r1, [pc, #132]	; (80010cc <SCH_Dispatch_Tasks+0x94>)
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	330c      	adds	r3, #12
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d02c      	beq.n	80010b4 <SCH_Dispatch_Tasks+0x7c>
			(*SCH_tasks_G[index].pTask)(); //Run task
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	491b      	ldr	r1, [pc, #108]	; (80010cc <SCH_Dispatch_Tasks+0x94>)
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4798      	blx	r3
			SCH_tasks_G[index].RunMe -= 1;
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	4917      	ldr	r1, [pc, #92]	; (80010cc <SCH_Dispatch_Tasks+0x94>)
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	330c      	adds	r3, #12
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	3b01      	subs	r3, #1
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	4911      	ldr	r1, [pc, #68]	; (80010cc <SCH_Dispatch_Tasks+0x94>)
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	330c      	adds	r3, #12
 8001092:	4602      	mov	r2, r0
 8001094:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[index].Period == 0)
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <SCH_Dispatch_Tasks+0x94>)
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	3308      	adds	r3, #8
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete_Task(index);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f80e 	bl	80010d0 <SCH_Delete_Task>
	for (index = 0; index < SCH_MAX_TASKS; index++){
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	3301      	adds	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b27      	cmp	r3, #39	; 0x27
 80010be:	d9c1      	bls.n	8001044 <SCH_Dispatch_Tasks+0xc>
	}
	// Report system status
	// SCH_Report_Status();
	// The scheduler enters idle mode at this point
	// SCH_Go_To_Sleep();
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000e0 	.word	0x200000e0

080010d0 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID){
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	uint8_t Return_code;
	// return Return Code
	if (SCH_tasks_G[taskID].pTask == 0)
 80010d8:	491d      	ldr	r1, [pc, #116]	; (8001150 <SCH_Delete_Task+0x80>)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <SCH_Delete_Task+0x22>
		// Error
		Return_code = RETURN_ERROR;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <SCH_Delete_Task+0x26>
	else
		Return_code =  RETURN_NORMAL;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]

	SCH_tasks_G[taskID].pTask = 0x0000;
 80010f6:	4916      	ldr	r1, [pc, #88]	; (8001150 <SCH_Delete_Task+0x80>)
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Delay = 0;
 8001108:	4911      	ldr	r1, [pc, #68]	; (8001150 <SCH_Delete_Task+0x80>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3304      	adds	r3, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Period = 0;
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <SCH_Delete_Task+0x80>)
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	3308      	adds	r3, #8
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].RunMe = 0;
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <SCH_Delete_Task+0x80>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	330c      	adds	r3, #12
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	return Return_code;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	200000e0 	.word	0x200000e0

08001154 <setTimer>:

int flag_timer[SIZE];
int timer_counter[SIZE];
int TIMER_CYLE = 10;

void setTimer(int index, int duration){
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIMER_CYLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <setTimer+0x30>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	fb92 f2f3 	sdiv	r2, r2, r3
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <setTimer+0x34>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flag_timer[index] = 0;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <setTimer+0x38>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2100      	movs	r1, #0
 8001176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000038 	.word	0x20000038
 8001188:	20000428 	.word	0x20000428
 800118c:	20000400 	.word	0x20000400

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_MspInit+0x5c>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_MspInit+0x5c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_MspInit+0x5c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x5c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x5c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x5c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_MspInit+0x60>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_MspInit+0x60>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000

080011f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d113      	bne.n	800122e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_TIM_Base_MspInit+0x44>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_TIM_Base_MspInit+0x44>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_TIM_Base_MspInit+0x44>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	201c      	movs	r0, #28
 8001224:	f000 fa95 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001228:	201c      	movs	r0, #28
 800122a:	f000 faae 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 f973 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM2_IRQHandler+0x10>)
 8001292:	f001 f8cf 	bl	8002434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000098 	.word	0x20000098

080012a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <light_traffic_redX>:


#include "traffic_light.h"


void light_traffic_redX(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <light_traffic_redX+0x2c>)
 80012b8:	f000 fc13 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <light_traffic_redX+0x2c>)
 80012c4:	f000 fc0d 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	4802      	ldr	r0, [pc, #8]	; (80012d8 <light_traffic_redX+0x2c>)
 80012d0:	f000 fc07 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40010800 	.word	0x40010800

080012dc <light_traffic_yellowX>:
void light_traffic_yellowX(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <light_traffic_yellowX+0x2c>)
 80012e8:	f000 fbfb 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <light_traffic_yellowX+0x2c>)
 80012f4:	f000 fbf5 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fe:	4802      	ldr	r0, [pc, #8]	; (8001308 <light_traffic_yellowX+0x2c>)
 8001300:	f000 fbef 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40010800 	.word	0x40010800

0800130c <light_traffic_greenX>:
void light_traffic_greenX(){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <light_traffic_greenX+0x2c>)
 8001318:	f000 fbe3 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <light_traffic_greenX+0x2c>)
 8001324:	f000 fbdd 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <light_traffic_greenX+0x2c>)
 8001330:	f000 fbd7 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010800 	.word	0x40010800

0800133c <light_traffic_redY>:

void light_traffic_redY(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <light_traffic_redY+0x2c>)
 8001346:	f000 fbcc 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <light_traffic_redY+0x2c>)
 8001352:	f000 fbc6 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <light_traffic_redY+0x2c>)
 800135e:	f000 fbc0 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40010800 	.word	0x40010800

0800136c <light_traffic_yellowY>:
void light_traffic_yellowY(){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <light_traffic_yellowY+0x2c>)
 8001376:	f000 fbb4 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <light_traffic_yellowY+0x2c>)
 8001382:	f000 fbae 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <light_traffic_yellowY+0x2c>)
 800138e:	f000 fba8 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010800 	.word	0x40010800

0800139c <light_traffic_greenY>:
void light_traffic_greenY(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <light_traffic_greenY+0x2c>)
 80013a6:	f000 fb9c 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <light_traffic_greenY+0x2c>)
 80013b2:	f000 fb96 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <light_traffic_greenY+0x2c>)
 80013be:	f000 fb90 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40010800 	.word	0x40010800

080013cc <toggle_all_red>:


void toggle_all_red(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

	// toggle red led
	HAL_GPIO_TogglePin(RED_X_GPIO_Port, RED_X_Pin);
 80013d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <toggle_all_red+0x1c>)
 80013d6:	f000 fb9c 	bl	8001b12 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED_Y_GPIO_Port, RED_Y_Pin);
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <toggle_all_red+0x1c>)
 80013de:	f000 fb98 	bl	8001b12 <HAL_GPIO_TogglePin>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010800 	.word	0x40010800

080013ec <toggle_all_green>:


void toggle_all_green(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

	// toggle red led
	HAL_GPIO_TogglePin(GREEN_X_GPIO_Port, GREEN_X_Pin);
 80013f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <toggle_all_green+0x1c>)
 80013f6:	f000 fb8c 	bl	8001b12 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin);
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <toggle_all_green+0x1c>)
 8001400:	f000 fb87 	bl	8001b12 <HAL_GPIO_TogglePin>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010800 	.word	0x40010800

0800140c <toggle_all_yellow>:

void toggle_all_yellow(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	// toggle red led
	HAL_GPIO_TogglePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin);
 8001410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <toggle_all_yellow+0x1c>)
 8001416:	f000 fb7c 	bl	8001b12 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin);
 800141a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <toggle_all_yellow+0x1c>)
 8001420:	f000 fb77 	bl	8001b12 <HAL_GPIO_TogglePin>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40010800 	.word	0x40010800

0800142c <clear_red_green_yellow>:

void clear_red_green_yellow(){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <clear_red_green_yellow+0x50>)
 8001438:	f000 fb53 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <clear_red_green_yellow+0x50>)
 8001444:	f000 fb4d 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <clear_red_green_yellow+0x50>)
 8001450:	f000 fb47 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <clear_red_green_yellow+0x50>)
 800145a:	f000 fb42 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <clear_red_green_yellow+0x50>)
 8001466:	f000 fb3c 	bl	8001ae2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <clear_red_green_yellow+0x50>)
 8001472:	f000 fb36 	bl	8001ae2 <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010800 	.word	0x40010800

08001480 <unittest_blinky>:
 */


#include "unittest.h"

void unittest_blinky(){
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLINKY_GPIO_Port, LED_BLINKY_Pin);
 8001484:	2120      	movs	r1, #32
 8001486:	4802      	ldr	r0, [pc, #8]	; (8001490 <unittest_blinky+0x10>)
 8001488:	f000 fb43 	bl	8001b12 <HAL_GPIO_TogglePin>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010800 	.word	0x40010800

08001494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001494:	f7ff ff04 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800149a:	490c      	ldr	r1, [pc, #48]	; (80014cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014b0:	4c09      	ldr	r4, [pc, #36]	; (80014d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f001 faf9 	bl	8002ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c2:	f7ff fb93 	bl	8000bec <main>
  bx lr
 80014c6:	4770      	bx	lr
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80014d0:	08002b50 	.word	0x08002b50
  ldr r2, =_sbss
 80014d4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80014d8:	20000454 	.word	0x20000454

080014dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC1_2_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x28>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x28>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f923 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fe48 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40022000 	.word	0x40022000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f93b 	bl	80017a6 <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f903 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000003c 	.word	0x2000003c
 8001564:	20000044 	.word	0x20000044
 8001568:	20000040 	.word	0x20000040

0800156c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_IncTick+0x1c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x20>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000044 	.word	0x20000044
 800158c:	20000450 	.word	0x20000450

08001590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <HAL_GetTick+0x10>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000450 	.word	0x20000450

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <__NVIC_EnableIRQ+0x34>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff90 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff2d 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff42 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff35 	bl	8001608 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b08b      	sub	sp, #44	; 0x2c
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e148      	b.n	8001a66 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d4:	2201      	movs	r2, #1
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 8137 	bne.w	8001a60 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4aa3      	ldr	r2, [pc, #652]	; (8001a84 <HAL_GPIO_Init+0x2c4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d05e      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 80017fc:	4aa1      	ldr	r2, [pc, #644]	; (8001a84 <HAL_GPIO_Init+0x2c4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d875      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001802:	4aa1      	ldr	r2, [pc, #644]	; (8001a88 <HAL_GPIO_Init+0x2c8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d058      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001808:	4a9f      	ldr	r2, [pc, #636]	; (8001a88 <HAL_GPIO_Init+0x2c8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d86f      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800180e:	4a9f      	ldr	r2, [pc, #636]	; (8001a8c <HAL_GPIO_Init+0x2cc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d052      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001814:	4a9d      	ldr	r2, [pc, #628]	; (8001a8c <HAL_GPIO_Init+0x2cc>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d869      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800181a:	4a9d      	ldr	r2, [pc, #628]	; (8001a90 <HAL_GPIO_Init+0x2d0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d04c      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001820:	4a9b      	ldr	r2, [pc, #620]	; (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d863      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001826:	4a9b      	ldr	r2, [pc, #620]	; (8001a94 <HAL_GPIO_Init+0x2d4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d046      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 800182c:	4a99      	ldr	r2, [pc, #612]	; (8001a94 <HAL_GPIO_Init+0x2d4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d85d      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d82a      	bhi.n	800188c <HAL_GPIO_Init+0xcc>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d859      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <HAL_GPIO_Init+0x80>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	080018bb 	.word	0x080018bb
 8001844:	08001895 	.word	0x08001895
 8001848:	080018a7 	.word	0x080018a7
 800184c:	080018e9 	.word	0x080018e9
 8001850:	080018ef 	.word	0x080018ef
 8001854:	080018ef 	.word	0x080018ef
 8001858:	080018ef 	.word	0x080018ef
 800185c:	080018ef 	.word	0x080018ef
 8001860:	080018ef 	.word	0x080018ef
 8001864:	080018ef 	.word	0x080018ef
 8001868:	080018ef 	.word	0x080018ef
 800186c:	080018ef 	.word	0x080018ef
 8001870:	080018ef 	.word	0x080018ef
 8001874:	080018ef 	.word	0x080018ef
 8001878:	080018ef 	.word	0x080018ef
 800187c:	080018ef 	.word	0x080018ef
 8001880:	080018ef 	.word	0x080018ef
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018b1 	.word	0x080018b1
 800188c:	4a82      	ldr	r2, [pc, #520]	; (8001a98 <HAL_GPIO_Init+0x2d8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001892:	e02c      	b.n	80018ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e029      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	3304      	adds	r3, #4
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e024      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	3308      	adds	r3, #8
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e01f      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	330c      	adds	r3, #12
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e01a      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c2:	2304      	movs	r3, #4
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e013      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	611a      	str	r2, [r3, #16]
          break;
 80018da:	e009      	b.n	80018f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018dc:	2308      	movs	r3, #8
 80018de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	615a      	str	r2, [r3, #20]
          break;
 80018e6:	e003      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          break;
 80018ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2bff      	cmp	r3, #255	; 0xff
 80018f4:	d801      	bhi.n	80018fa <HAL_GPIO_Init+0x13a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_Init+0x13e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3304      	adds	r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d802      	bhi.n	800190c <HAL_GPIO_Init+0x14c>
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x152>
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3b08      	subs	r3, #8
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	210f      	movs	r1, #15
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8090 	beq.w	8001a60 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001940:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a55      	ldr	r2, [pc, #340]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_GPIO_Init+0x2e0>)
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x2e4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1e0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_GPIO_Init+0x2e8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1dc>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1d8>
 8001994:	2302      	movs	r3, #2
 8001996:	e004      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 8001998:	2303      	movs	r3, #3
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 80019a0:	2300      	movs	r3, #0
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	f002 0203 	and.w	r2, r2, #3
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b2:	493b      	ldr	r1, [pc, #236]	; (8001aa0 <HAL_GPIO_Init+0x2e0>)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019cc:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4937      	ldr	r1, [pc, #220]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4933      	ldr	r1, [pc, #204]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	492d      	ldr	r1, [pc, #180]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4923      	ldr	r1, [pc, #140]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	491f      	ldr	r1, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4919      	ldr	r1, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3301      	adds	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f aeaf 	bne.w	80017d4 <HAL_GPIO_Init+0x14>
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	372c      	adds	r7, #44	; 0x2c
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e001      	b.n	8001ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	807b      	strh	r3, [r7, #2]
 8001aee:	4613      	mov	r3, r2
 8001af0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af2:	787b      	ldrb	r3, [r7, #1]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af8:	887a      	ldrh	r2, [r7, #2]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001afe:	e003      	b.n	8001b08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b24:	887a      	ldrh	r2, [r7, #2]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	041a      	lsls	r2, r3, #16
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	400b      	ands	r3, r1
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	611a      	str	r2, [r3, #16]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e26c      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8087 	beq.w	8001c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b64:	4b92      	ldr	r3, [pc, #584]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d00c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b70:	4b8f      	ldr	r3, [pc, #572]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d112      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5e>
 8001b7c:	4b8c      	ldr	r3, [pc, #560]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d10b      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8a:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d06c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x12c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d168      	bne.n	8001c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e246      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x76>
 8001bac:	4b80      	ldr	r3, [pc, #512]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a7f      	ldr	r2, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e02e      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b7b      	ldr	r3, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7a      	ldr	r2, [pc, #488]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0xbc>
 8001be6:	4b72      	ldr	r3, [pc, #456]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a71      	ldr	r2, [pc, #452]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001c00:	4b6b      	ldr	r3, [pc, #428]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a67      	ldr	r2, [pc, #412]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fcb6 	bl	8001590 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fcb2 	bl	8001590 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1fa      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe4>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fca2 	bl	8001590 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fc9e 	bl	8001590 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1e6      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x10c>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c8a:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x18c>
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x176>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1ba      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4939      	ldr	r1, [pc, #228]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fc57 	bl	8001590 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fc53 	bl	8001590 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e19b      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4927      	ldr	r1, [pc, #156]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fc36 	bl	8001590 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fc32 	bl	8001590 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e17a      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d03a      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff fc16 	bl	8001590 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fc12 	bl	8001590 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e15a      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f000 fa9a 	bl	80022c0 <RCC_Delay>
 8001d8c:	e01c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_RCC_OscConfig+0x274>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff fbfc 	bl	8001590 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9a:	e00f      	b.n	8001dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fbf8 	bl	8001590 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d908      	bls.n	8001dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e140      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	42420000 	.word	0x42420000
 8001db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	4b9e      	ldr	r3, [pc, #632]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e9      	bne.n	8001d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a6 	beq.w	8001f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dda:	4b97      	ldr	r3, [pc, #604]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10d      	bne.n	8001e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b94      	ldr	r3, [pc, #592]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4a93      	ldr	r2, [pc, #588]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	61d3      	str	r3, [r2, #28]
 8001df2:	4b91      	ldr	r3, [pc, #580]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b8e      	ldr	r3, [pc, #568]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a8a      	ldr	r2, [pc, #552]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fbb9 	bl	8001590 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff fbb5 	bl	8001590 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b64      	cmp	r3, #100	; 0x64
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0fd      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x312>
 8001e48:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a7a      	ldr	r2, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e02d      	b.n	8001eb2 <HAL_RCC_OscConfig+0x36e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x334>
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a72      	ldr	r2, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	e01c      	b.n	8001eb2 <HAL_RCC_OscConfig+0x36e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCC_OscConfig+0x356>
 8001e80:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a6c      	ldr	r2, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4a69      	ldr	r2, [pc, #420]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6213      	str	r3, [r2, #32]
 8001e98:	e00b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x36e>
 8001e9a:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a66      	ldr	r2, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a63      	ldr	r2, [pc, #396]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d015      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7ff fb69 	bl	8001590 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fb65 	bl	8001590 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0ab      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ee      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x37e>
 8001ee4:	e014      	b.n	8001f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fb53 	bl	8001590 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7ff fb4f 	bl	8001590 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e095      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1ee      	bne.n	8001eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f16:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a47      	ldr	r2, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8081 	beq.w	800202e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d061      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d146      	bne.n	8001fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_OscConfig+0x4fc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff fb23 	bl	8001590 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fb1f 	bl	8001590 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e067      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d108      	bne.n	8001f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	492d      	ldr	r1, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a19      	ldr	r1, [r3, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	4927      	ldr	r1, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x4fc>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff faf3 	bl	8001590 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff faef 	bl	8001590 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e037      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x46a>
 8001fcc:	e02f      	b.n	800202e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_RCC_OscConfig+0x4fc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fadc 	bl	8001590 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff fad8 	bl	8001590 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e020      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x498>
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e013      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	42420060 	.word	0x42420060

08002044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d0      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4965      	ldr	r1, [pc, #404]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d040      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d115      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e073      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06b      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7ff fa2c 	bl	8001590 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7ff fa28 	bl	8001590 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e053      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d210      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1cc>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1d0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f98a 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	08002b24 	.word	0x08002b24
 8002210:	2000003c 	.word	0x2000003c
 8002214:	20000040 	.word	0x20000040

08002218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x30>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x36>
 8002246:	e027      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	e027      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0c5b      	lsrs	r3, r3, #17
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800227a:	fb02 f203 	mul.w	r2, r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e004      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	613b      	str	r3, [r7, #16]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800229a:	613b      	str	r3, [r7, #16]
      break;
 800229c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229e:	693b      	ldr	r3, [r7, #16]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	08002b34 	.word	0x08002b34
 80022b8:	08002b44 	.word	0x08002b44
 80022bc:	003d0900 	.word	0x003d0900

080022c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCC_Delay+0x34>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <RCC_Delay+0x38>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a5b      	lsrs	r3, r3, #9
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022dc:	bf00      	nop
  }
  while (Delay --);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <RCC_Delay+0x1c>
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	2000003c 	.word	0x2000003c
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e041      	b.n	8002392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe ff66 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 fa56 	bl	80027ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e035      	b.n	8002420 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_TIM_Base_Start_IT+0x90>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d009      	beq.n	80023ea <HAL_TIM_Base_Start_IT+0x4e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d004      	beq.n	80023ea <HAL_TIM_Base_Start_IT+0x4e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a12      	ldr	r2, [pc, #72]	; (8002430 <HAL_TIM_Base_Start_IT+0x94>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d111      	bne.n	800240e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d010      	beq.n	800241e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240c:	e007      	b.n	800241e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40000400 	.word	0x40000400

08002434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d020      	beq.n	8002498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0202 	mvn.w	r2, #2
 8002468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f998 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f98b 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f99a 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d020      	beq.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01b      	beq.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0204 	mvn.w	r2, #4
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f972 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f965 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f974 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d020      	beq.n	8002530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0208 	mvn.w	r2, #8
 8002500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2204      	movs	r2, #4
 8002506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f94c 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f93f 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f94e 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0210 	mvn.w	r2, #16
 800254c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2208      	movs	r2, #8
 8002552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f926 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f919 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f928 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0201 	mvn.w	r2, #1
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fc60 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa6f 	bl	8002aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8f8 	bl	80027d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0220 	mvn.w	r2, #32
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa42 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIM_ConfigClockSource+0x1c>
 800262c:	2302      	movs	r3, #2
 800262e:	e0b4      	b.n	800279a <HAL_TIM_ConfigClockSource+0x186>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800264e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002668:	d03e      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0xd4>
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266e:	f200 8087 	bhi.w	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	f000 8086 	beq.w	8002786 <HAL_TIM_ConfigClockSource+0x172>
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d87f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b70      	cmp	r3, #112	; 0x70
 8002682:	d01a      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0xa6>
 8002684:	2b70      	cmp	r3, #112	; 0x70
 8002686:	d87b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002688:	2b60      	cmp	r3, #96	; 0x60
 800268a:	d050      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x11a>
 800268c:	2b60      	cmp	r3, #96	; 0x60
 800268e:	d877      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b50      	cmp	r3, #80	; 0x50
 8002692:	d03c      	beq.n	800270e <HAL_TIM_ConfigClockSource+0xfa>
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d873      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d058      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x13a>
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d86f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b30      	cmp	r3, #48	; 0x30
 80026a2:	d064      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026a4:	2b30      	cmp	r3, #48	; 0x30
 80026a6:	d86b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d060      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d867      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d05c      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d05a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026b8:	e062      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f000 f96a 	bl	80029a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	609a      	str	r2, [r3, #8]
      break;
 80026e6:	e04f      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f000 f953 	bl	80029a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270a:	609a      	str	r2, [r3, #8]
      break;
 800270c:	e03c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	f000 f8ca 	bl	80028b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2150      	movs	r1, #80	; 0x50
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f921 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 800272c:	e02c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	461a      	mov	r2, r3
 800273c:	f000 f8e8 	bl	8002910 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2160      	movs	r1, #96	; 0x60
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f911 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 800274c:	e01c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 f8aa 	bl	80028b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f901 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 800276c:	e00c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f000 f8f8 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 800277e:	e003      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      break;
 8002784:	e000      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <TIM_Base_SetConfig+0xc0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d007      	beq.n	8002814 <TIM_Base_SetConfig+0x28>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280a:	d003      	beq.n	8002814 <TIM_Base_SetConfig+0x28>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <TIM_Base_SetConfig+0xc4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d108      	bne.n	8002826 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <TIM_Base_SetConfig+0xc0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <TIM_Base_SetConfig+0x52>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d003      	beq.n	800283e <TIM_Base_SetConfig+0x52>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <TIM_Base_SetConfig+0xc4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d108      	bne.n	8002850 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <TIM_Base_SetConfig+0xc0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f023 0201 	bic.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]
  }
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400

080028b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 030a 	bic.w	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0210 	bic.w	r2, r3, #16
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	031b      	lsls	r3, r3, #12
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	f043 0307 	orr.w	r3, r3, #7
 8002990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b087      	sub	sp, #28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e041      	b.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d004      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10c      	bne.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <__libc_init_array>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	4d0c      	ldr	r5, [pc, #48]	; (8002aec <__libc_init_array+0x38>)
 8002aba:	4c0d      	ldr	r4, [pc, #52]	; (8002af0 <__libc_init_array+0x3c>)
 8002abc:	1b64      	subs	r4, r4, r5
 8002abe:	10a4      	asrs	r4, r4, #2
 8002ac0:	42a6      	cmp	r6, r4
 8002ac2:	d109      	bne.n	8002ad8 <__libc_init_array+0x24>
 8002ac4:	f000 f822 	bl	8002b0c <_init>
 8002ac8:	2600      	movs	r6, #0
 8002aca:	4d0a      	ldr	r5, [pc, #40]	; (8002af4 <__libc_init_array+0x40>)
 8002acc:	4c0a      	ldr	r4, [pc, #40]	; (8002af8 <__libc_init_array+0x44>)
 8002ace:	1b64      	subs	r4, r4, r5
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	42a6      	cmp	r6, r4
 8002ad4:	d105      	bne.n	8002ae2 <__libc_init_array+0x2e>
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
 8002ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002adc:	4798      	blx	r3
 8002ade:	3601      	adds	r6, #1
 8002ae0:	e7ee      	b.n	8002ac0 <__libc_init_array+0xc>
 8002ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae6:	4798      	blx	r3
 8002ae8:	3601      	adds	r6, #1
 8002aea:	e7f2      	b.n	8002ad2 <__libc_init_array+0x1e>
 8002aec:	08002b48 	.word	0x08002b48
 8002af0:	08002b48 	.word	0x08002b48
 8002af4:	08002b48 	.word	0x08002b48
 8002af8:	08002b4c 	.word	0x08002b4c

08002afc <memset>:
 8002afc:	4603      	mov	r3, r0
 8002afe:	4402      	add	r2, r0
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d100      	bne.n	8002b06 <memset+0xa>
 8002b04:	4770      	bx	lr
 8002b06:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0a:	e7f9      	b.n	8002b00 <memset+0x4>

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr
